--- perl-5.10.1.orig/perl.c	2009-04-22 20:07:41.000000000 +0200
+++ perl-5.10.1/perl.c	2010-11-26 22:06:52.225163765 +0100
@@ -1511,20 +1511,30 @@
 #else
 #ifdef OS2
 	sv_setpv(GvSVn(tmpgv), os2_execname(aTHX));
 #else
 	sv_setpv(GvSVn(tmpgv),PL_origargv[0]);
 #endif
 #endif
     }
 }
 
+/* .dynbss will move it to the end of .data in the output file. */
+/* Using a struct to force 1-byte alignment (gcc-7.3 forces .align 4 in the .s file for __mode__(SI)). */
+/* Using a struct because gcc-7.3 puts global variables in reverse order in the .s file, gcc-4.4 puts them in normal order. */
+__attribute__((__aligned__(1), __section__(".dynbss"))) struct {
+  __attribute__((__packed__, __mode__(SI))) int size;
+  char data[1 << 24];  /* 16 MiB capacity for escaped preamble.pm. */
+  __attribute__((__packed__, __mode__(SI))) int size2;
+  __attribute__((__packed__, __mode__(SI))) int capacity;
+} mini_preamble = {0, "", sizeof(mini_preamble.data), sizeof(mini_preamble.data)};
+
 /*
 =for apidoc perl_parse
 
 Tells a Perl interpreter to parse a Perl script.  See L<perlembed>.
 
 =cut
 */
 
 int
 perl_parse(pTHXx_ XSINIT_t xsinit, int argc, char **argv, char **env)
@@ -1556,20 +1566,22 @@
 	const char * const s = PerlEnv_getenv("PERL_HASH_SEED_DEBUG");
 
 	if (s && (atoi(s) == 1))
 	    PerlIO_printf(Perl_debug_log, "HASH_SEED = %"UVuf"\n", PL_rehash_seed);
     }
 #endif /* #if defined(USE_HASH_SEED) || defined(USE_HASH_SEED_EXPLICIT) */
 
     PL_origargc = argc;
     PL_origargv = argv;
 
+    Perl_av_create_and_push(aTHX_ &PL_preambleav, newSVpvn(mini_preamble.data, mini_preamble.size));
+
     if (PL_origalen != 0) {
 	PL_origalen = 1; /* don't use old PL_origalen if perl_parse() is called again */
     }
     else {
 	/* Set PL_origalen be the sum of the contiguous argv[]
 	 * elements plus the size of the env in case that it is
 	 * contiguous with the argv[].  This is used in mg.c:Perl_magic_set()
 	 * as the maximum modifiable length of $0.  In the worst case
 	 * the area we are able to modify is limited to the size of
 	 * the original argv[0].  (See below for 'contiguous', though.)
@@ -4869,25 +4881,25 @@
 	    do { incpush(buf,TRUE,TRUE,TRUE,FALSE); } while (my_trnlnm("PERL5LIB",buf,++idx));
 	else
 	    while (my_trnlnm("PERLLIB",buf,idx++)) incpush(buf,FALSE,FALSE,TRUE,FALSE);
 #endif /* VMS */
     }
 
 /* Use the ~-expanded versions of APPLLIB (undocumented),
     ARCHLIB PRIVLIB SITEARCH SITELIB VENDORARCH and VENDORLIB
 */
 #ifdef APPLLIB_EXP
-    incpush(APPLLIB_EXP, TRUE, TRUE, TRUE, TRUE);
+    /*incpush(APPLLIB_EXP, TRUE, TRUE, TRUE, TRUE);*/
 #endif
 
 #ifdef ARCHLIB_EXP
-    incpush(ARCHLIB_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(ARCHLIB_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #endif
 #ifdef MACOS_TRADITIONAL
     {
 	Stat_t tmpstatbuf;
     	SV * privdir = newSV(0);
 	char * macperl = PerlEnv_getenv("MACPERL");
 	
 	if (!macperl)
 	    macperl = "";
 	
@@ -4900,73 +4912,73 @@
 	
    	SvREFCNT_dec(privdir);
     }
     if (!PL_tainting)
 	incpush(":", FALSE, FALSE, TRUE, FALSE);
 #else
 #ifndef PRIVLIB_EXP
 #  define PRIVLIB_EXP "/usr/local/lib/perl5:/usr/local/lib/perl"
 #endif
 #if defined(WIN32)
-    incpush(PRIVLIB_EXP, TRUE, FALSE, TRUE, TRUE);
+    /*incpush(PRIVLIB_EXP, TRUE, FALSE, TRUE, TRUE);*/
 #else
-    incpush(PRIVLIB_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(PRIVLIB_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #endif
 
 #ifdef SITEARCH_EXP
     /* sitearch is always relative to sitelib on Windows for
      * DLL-based path intuition to work correctly */
 #  if !defined(WIN32)
-    incpush(SITEARCH_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(SITEARCH_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #  endif
 #endif
 
 #ifdef SITELIB_EXP
 #  if defined(WIN32)
     /* this picks up sitearch as well */
-    incpush(SITELIB_EXP, TRUE, FALSE, TRUE, TRUE);
+    /*incpush(SITELIB_EXP, TRUE, FALSE, TRUE, TRUE);*/
 #  else
-    incpush(SITELIB_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(SITELIB_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #  endif
 #endif
 
 #if defined(SITELIB_STEM) && defined(PERL_INC_VERSION_LIST)
     /* Search for version-specific dirs below here */
-    incpush(SITELIB_STEM, FALSE, TRUE, TRUE, TRUE);
+    /*incpush(SITELIB_STEM, FALSE, TRUE, TRUE, TRUE);*/
 #endif
 
 #ifdef PERL_VENDORARCH_EXP
     /* vendorarch is always relative to vendorlib on Windows for
      * DLL-based path intuition to work correctly */
 #  if !defined(WIN32)
-    incpush(PERL_VENDORARCH_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(PERL_VENDORARCH_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #  endif
 #endif
 
 #ifdef PERL_VENDORLIB_EXP
 #  if defined(WIN32)
-    incpush(PERL_VENDORLIB_EXP, TRUE, FALSE, TRUE, TRUE);	/* this picks up vendorarch as well */
+    /*incpush(PERL_VENDORLIB_EXP, TRUE, FALSE, TRUE, TRUE);*/	/* this picks up vendorarch as well */
 #  else
-    incpush(PERL_VENDORLIB_EXP, FALSE, FALSE, TRUE, TRUE);
+    /*incpush(PERL_VENDORLIB_EXP, FALSE, FALSE, TRUE, TRUE);*/
 #  endif
 #endif
 
 #ifdef PERL_VENDORLIB_STEM /* Search for version-specific dirs below here */
-    incpush(PERL_VENDORLIB_STEM, FALSE, TRUE, TRUE, TRUE);
+    /*incpush(PERL_VENDORLIB_STEM, FALSE, TRUE, TRUE, TRUE);*/
 #endif
 
 #ifdef PERL_OTHERLIBDIRS
-    incpush(PERL_OTHERLIBDIRS, TRUE, TRUE, TRUE, TRUE);
+    /*incpush(PERL_OTHERLIBDIRS, TRUE, TRUE, TRUE, TRUE);*/
 #endif
 
-    if (!PL_tainting)
-	incpush(".", FALSE, FALSE, TRUE, FALSE);
+    /*if (!PL_tainting)
+	incpush(".", FALSE, FALSE, TRUE, FALSE);*/
 #endif /* MACOS_TRADITIONAL */
 }
 
 #if defined(DOSISH) || defined(EPOC) || defined(__SYMBIAN32__)
 #    define PERLLIB_SEP ';'
 #else
 #  if defined(VMS)
 #    define PERLLIB_SEP '|'
 #  else
 #    if defined(MACOS_TRADITIONAL)
--- perl-5.10.1.orig/Configure	2009-08-18 21:03:53.000000000 +0200
+++ perl-5.10.1/Configure	2010-11-26 21:00:01.284891584 +0100
@@ -5139,25 +5139,25 @@
 		eval $checkccflag
 		;;
 	esac
 
 	# on x86_64 (at least) we require an extra library (libssp) in the
 	# link command line. This library is not named, so I infer that it is
 	# an implementation detail that may change. Hence the safest approach
 	# is to add the flag to the flags passed to the compiler at link time,
 	# as that way the compiler can do the right implementation dependant
 	# thing. (NWC)
-	case "$gccversion" in
-	?*)	set stack-protector -fstack-protector
-		eval $checkccflag
-		;;
-	esac
+	#case "$gccversion" in
+	#?*)	set stack-protector -fstack-protector
+	#	eval $checkccflag
+	#	;;
+	#esac
 	;;
 esac
 
 case "$mips_type" in
 *BSD*|'') inclwanted="$locincpth $usrinc";;
 *) inclwanted="$locincpth $inclwanted $usrinc/bsd";;
 esac
 for thisincl in $inclwanted; do
 	if $test -d $thisincl; then
 		if $test x$thisincl != x$usrinc; then
